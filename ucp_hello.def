#- UCP hello world client / server example utility
#- Server side: ./ucp_hello_world
#- Client side: ./ucp_hello_world -n <server host name>
#-     - Client acquires Server UCX address via TCP socket

include: c/posix.def
include: macros/ucp.def
# run: ucp_hello_server

page: ucp_hello, basic_frame
    module: c
    cc: gcc -std=gnu11
    $call test_main, client

page: ucp_hello_server, basic_frame
    module: c
    $call test_main, server

subcode: test_main(server)
    $local char* client_target_name = NULL

    $call ucp_init
    $call worker_init
    $call oob_init, $(server)

    $(if:server=server)
        return run_ucx_server(ucp_worker)
    $(else)
        return run_ucx_client(ucp_worker)

#---------------------------------------- 
fncode: run_ucx_server(ucp_worker)
    $local ucp_tag_message_h msg_tag
    $do_while msg_tag == NULL
        ucp_worker_progress(ucp_worker)
        msg_tag = ucp_tag_probe_nb(ucp_worker, tag, tag_mask, 1, &info_tag)

    msg = malloc(info_tag.length)
    request = ucp_tag_msg_recv_nb(ucp_worker, msg, info_tag.length, ucp_dt_make_contig(1), msg_tag, recv_handler)
    $if UCS_PTR_IS_ERR(request)
        $print "unable to to receive UCX addr-message: %s", ucs_status_string(UCS_PTR_STATUS(request))
        free(msg)
    $else
        wait(ucp_worker, request)
        request->completed = 0
        ucp_request_release(request)
        $print "UCX add-message was received"

    peer_addr = malloc(msg->data_len)
    peer_addr_len = msg->data_len
    memcpy(peer_addr, msg+1, peer_addr_len)
    free(msg)

fncode: run_ucx_client(ucp_worker)
#---------------------------------------- 
#---------------------------------------- 
subcode: oob_init(server)
    $(set:socket=oob_sock)
    $(set:A_len=&$1_len, sizeof($1_len))
    $(set:A=$1, $1_len)
    $(if:server=server)
        &call tcp_listen_once, 13337
            ret = send(oob_sock, $(A_len:local_addr), 0)
            ret = send(oob_sock, $(A:local_addr), 0)
    $(else)
        $global ucp_address_t * peer_addr, size_t peer_addr_len
        &call tcp_connect_once, "localhost", "13337"
            ret = recv(oob_sock, $(A_len:peer_addr), 0)
            peer_addr = malloc(peer_addr_len)
            ret = recv(oob_sock, $(A:peer_addr), 0)
            $print "got addr: [%p...] - %ld", *(void**)peer_addr, peer_addr_len

